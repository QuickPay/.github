name: Terraform Plan

on:
  pull_request:

  issue_comment:
    types: [created]

jobs:
  check_run:
    runs-on: ubuntu-latest
    if: ${{ (github.event_name == 'issue_comment' && github.event.comment.body == '@plan') || github.event_name == 'pull_request' }}
    steps:
      - uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            terraform:
              - 'terraform/**'

      - name: resolve_should_run
        id: resolve_should_run
        run: |
          if [[ '${{ github.event_name}}' == 'pull_request' && '${{steps.changes.outputs.terraform}}' == 'false' ]]; then
            echo "should_run=false" >> $GITHUB_OUTPUT
          else
            echo "should_run=true" >> $GITHUB_OUTPUT
          fi

    outputs:
      should_run: ${{ steps.resolve_should_run.outputs.should_run }}

  init-validate:
    runs-on: ubuntu-latest
    needs: [check_run]
    if: ${{ needs.check_run.outputs.should_run == 'true' }}
    steps:
      - uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.QUICKPAY_TOOLS_READONLY_SSH_KEY_PRIVATE }}

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.0

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.READ_ONLY_INFRASTRUCTURE_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.READ_ONLY_INFRASTRUCTURE_AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - run: |
          echo "GRAFANA_AUTH=${{ secrets.READ_ONLY_GRAFANA_API_KEY }}" >> $GITHUB_ENV
          echo "HUMIO_API_TOKEN=${{ secrets.READ_ONLY_HUMIO_API_TOKEN }}" >> $GITHUB_ENV

      - uses: actions/checkout@v3

      - run: |
          cd terraform

          if [[ -d registry ]]; then
            cd registry
            echo "Initializig Registry"
            terraform init -input=false
            terraform validate
            terraform workspace new quickpay-registry || true
            cd ..
          fi

          if [[ -d main ]]
          then
            cd main
            echo "Initializig Main"
          else
            echo "Initializig Terraform"
          fi

          terraform init -input=false
          terraform validate
          terraform workspace new quickpay-pci-stag || true
          terraform workspace new quickpay-pci-prod || true
          terraform workspace new quickpay-nonpci-stag || true
          terraform workspace new quickpay-nonpci-prod || true
          terraform workspace new quickpay-internal-stag || true
          terraform workspace new quickpay-internal-prod || true
          terraform workspace new quickpay-root || true

  fmt:
    runs-on: ubuntu-latest
    needs: [check_run]
    if: ${{ needs.check_run.outputs.should_run == 'true' }}
    steps:
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.0

      - uses: actions/checkout@v3

      - run: |
          cd terraform
          terraform fmt -check -diff

  tflint:
    runs-on: ubuntu-latest
    needs: [check_run]
    if: ${{ needs.check_run.outputs.should_run == 'true' }}
    steps:
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.0

      - uses: terraform-linters/setup-tflint@v3
        name: Setup TFLint
        with:
          tflint_version: v0.45.0

      - uses: actions/checkout@v3

      - run: |
          if [[ -d registry ]]; then
            echo "Linting Registry"
            cd registry
            tflint --init
            tflint --config ./.tflint.hcl
            cd ..
          fi

          if [[ -d main ]]; then
            echo "Linting Main"
            cd main
            tflint --init
            tflint --config ./.tflint.hcl
            cd ..
          fi

          if [[ -f settings.tf ]]; then
            echo "Linting Terraform"
            tflint --init
            tflint --config ./.tflint.hcl
          fi

  plan:
    name: plan
    runs-on: ubuntu-latest
    needs: [init-validate, fmt, tflint]
    strategy:
      fail-fast: false
      matrix:
        name:
          - registry
          - internal-stag
          - internal-prod
          - nonpci-stag
          - nonpci-prod
          - pci-stag
          - pci-prod
          - root
    steps:
      - uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.QUICKPAY_TOOLS_READONLY_SSH_KEY_PRIVATE }}

      - name: Extract PR number
        id: pr
        run: |
          if [[ ${{ github.event_name }} == 'issue_comment' ]]; then
            PR_URL="${{ github.event.issue.pull_request.url }}"
            PR_NUM=${PR_URL##*/}
          elif [[ ${{ github.event_name }} == 'pull_request' ]]; then
            PR_NUM=${{ github.event.number }}
          fi
          echo "number=$PR_NUM" >> $GITHUB_OUTPUT

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.0

      - name: resolve pr refs (issue_comment)
        if: ${{ github.event_name == 'issue_comment' }}
        id: refs
        uses: eficode/resolve-pr-refs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: checkout (issue_comment)
        uses: actions/checkout@v3
        if: ${{ github.event_name == 'issue_comment' }}
        with:
          fetch-depth: 0
          ref: ${{ steps.refs.outputs.head_ref }}

      - name: checkout (pull_request)
        uses: actions/checkout@v3
        if: ${{ github.event_name == 'pull_request' }}
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      - name: Extract credentials
        id: credentials
        env:
          NAME: ${{ matrix.name }}
        run: |
          declare -A access_key_ids=(
            ["registry"]="${{ secrets.READ_ONLY_REGISTRY_AWS_ACCESS_KEY_ID }}"
            ["internal-stag"]="${{ secrets.READ_ONLY_STAG_INTERNAL_AWS_ACCESS_KEY_ID }}"
            ["internal-prod"]="${{ secrets.READ_ONLY_PROD_INTERNAL_AWS_ACCESS_KEY_ID }}"
            ["nonpci-stag"]="${{ secrets.READ_ONLY_STAG_NONPCI_AWS_ACCESS_KEY_ID }}"
            ["nonpci-prod"]="${{ secrets.READ_ONLY_PROD_NONPCI_AWS_ACCESS_KEY_ID }}"
            ["pci-stag"]="${{ secrets.READ_ONLY_STAG_PCI_AWS_ACCESS_KEY_ID }}"
            ["pci-prod"]="${{ secrets.READ_ONLY_PROD_PCI_AWS_ACCESS_KEY_ID }}"
            ["root"]="${{ secrets.READ_ONLY_ROOT_AWS_ACCESS_KEY_ID }}"
          )
          declare -A secret_access_keys=(
            ["registry"]="${{ secrets.READ_ONLY_REGISTRY_AWS_SECRET_ACCESS_KEY }}"
            ["internal-stag"]="${{ secrets.READ_ONLY_STAG_INTERNAL_AWS_SECRET_ACCESS_KEY }}"
            ["internal-prod"]="${{ secrets.READ_ONLY_PROD_INTERNAL_AWS_SECRET_ACCESS_KEY }}"
            ["nonpci-stag"]="${{ secrets.READ_ONLY_STAG_NONPCI_AWS_SECRET_ACCESS_KEY }}"
            ["nonpci-prod"]="${{ secrets.READ_ONLY_PROD_NONPCI_AWS_SECRET_ACCESS_KEY }}"
            ["pci-stag"]="${{ secrets.READ_ONLY_STAG_PCI_AWS_SECRET_ACCESS_KEY }}"
            ["pci-prod"]="${{ secrets.READ_ONLY_PROD_PCI_AWS_SECRET_ACCESS_KEY }}"
            ["root"]="${{ secrets.READ_ONLY_ROOT_AWS_SECRET_ACCESS_KEY }}"
          )
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "access_key_id=${access_key_ids[$NAME]}" >> $GITHUB_OUTPUT
          echo "secret_access_key=${secret_access_keys[$NAME]}" >> $GITHUB_OUTPUT
          echo "GRAFANA_AUTH=${{ secrets.READ_ONLY_GRAFANA_API_KEY }}" >> $GITHUB_ENV
          echo "HUMIO_API_TOKEN=${{ secrets.READ_ONLY_HUMIO_API_TOKEN }}" >> $GITHUB_ENV

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ steps.credentials.outputs.access_key_id }}
          aws-secret-access-key: ${{ steps.credentials.outputs.secret_access_key }}
          aws-region: eu-central-1

      - name: Plan
        env:
          WORKSPACE: quickpay-${{ steps.credentials.outputs.name }}
        id: plan
        run: |
          cd terraform

          if [[ -d registry && "$WORKSPACE" == quickpay-registry ]]; then
            cd registry
            echo "Plan Registry"
          elif [[ -d main ]]; then
            echo "Plan Main"
            cd main
          fi

          terraform init -input=false
          terraform workspace select $WORKSPACE
          terraform plan -input=false -var-file=$WORKSPACE.tfvars -out=$WORKSPACE.tfplan
          terraform show $WORKSPACE.tfplan -no-color | grep -v "^::" | grep -v "^\[command\]" >> /tmp/plan.txt
          mv $WORKSPACE.tfplan /tmp/plan.tfplan

      - name: Upload Plan
        env:
          BRANCH: __plan_branch_${{ steps.credentials.outputs.name }}
        run: |
          export COMMIT_SHA=$(git log -n 1 --pretty=format:"%H")  
          git rev-parse --abbrev-ref HEAD
          echo $COMMIT_SHA
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git checkout $BRANCH
          git pull origin $BRANCH
          mv /tmp/plan.tfplan ./$COMMIT_SHA.tfplan
          git add $COMMIT_SHA.tfplan
          git commit -m "upload $COMMIT_SHA.tfplan"
          git push origin $BRANCH

      - name: Upload Plan to Pastie
        id: pastie
        uses: QuickPay/pastie-upload-action@v1.1.0
        with:
          credentials: ${{ secrets.PASTIE_CREDENTIALS }}
          document_path: "/tmp/plan.txt"

      - name: "Comment PR"
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr_num = parseInt("${{ steps.pr.outputs.number }}")
            const { repo: { owner, repo }  } = context;
            const url = "${{ steps.pastie.outputs.url }}";
            const title = "# ${{ steps.credentials.outputs.name }} Plan";
            const body = `${title}\n${url}`;
            github.rest.issues.createComment({ issue_number: pr_num, owner, repo, body: body });
