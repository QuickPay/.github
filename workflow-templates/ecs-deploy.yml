name: ECS Deploy
on:
  workflow_dispatch:
    inputs:
      environment:
        type: environment
      image_tag:
        description: "Image tag to deploy"
        required: true
      task_definition_revision:
        description: "Optional: Task Definition Revision, to base deployment off of"
        required: false
        default: "latest"

jobs:
  find_constants:
    name: "Find Constants for Deploy ${{ github.event.inputs.environment }}"
    runs-on: ubuntu-latest
    outputs:
      task_definition_name: ${{ steps.constants.outputs.task_definition_name }}
      task_definition_container_name: ${{ steps.constants.outputs.task_definition_container_name }}
      ecs_service_name: ${{ steps.constants.outputs.ecs_service_name }}
      ecs_cluster_name: ${{ steps.constants.outputs.ecs_cluster_name }}
      ecr_repository_name: ${{ steps.constants.outputs.ecr_repository_name }}
      ecr_repository_url: ${{ steps.constants.outputs.ecr_repository_url }}
      application_name: ${{ steps.constants.outputs.application_name }}
    steps:
      - name: Resolve Constants
        id: constants
        run: |
          if [[ "${{ github.event.inputs.environment }}" = "staging" ]]; then
            ENVIRONMENT_PREFIX="stag"
          elif [[ "${{ github.event.inputs.environment }}" = "production" ]]; then
            ENVIRONMENT_PREFIX="prod"
          else
            echo "Unexpected environment chosen for deployment. Exiting Unsuccessfully"
            exit 1
          fi

          echo "Environment: $ENVIRONMENT_PREFIX"

          #ACCOUNT_ENVIRONMENT="pci"
          #ACCOUNT_ENVIRONMENT="nonpci"
          #ACCOUNT_ENVIRONMENT="internal"

          APPLICATION_NAME="${{ github.event.repository.name }}"
          NAME_PREFIX="$ENVIRONMENT_PREFIX-$ACCOUNT_ENVIRONMENT" 
          FULL_NAME="$NAME_PREFIX-$APPLICATION_NAME"
          ECR_REPOSITORY_NAME="$APPLICATION_NAME"
          ECS_CLUSTER_NAME="$NAME_PREFIX-backend"
          ECR_REPOSITORY_URL="312890589679.dkr.ecr.eu-central-1.amazonaws.com/$ECR_REPOSITORY_NAME"

          echo "application_name=$APPLICATION_NAME" >> $GITHUB_OUTPUT
          echo "task_definition_name=$FULL_NAME" >> $GITHUB_OUTPUT
          echo "task_definition_container_name=$FULL_NAME" >> $GITHUB_OUTPUT
          echo "ecs_service_name=$FULL_NAME" >> $GITHUB_OUTPUT
          echo "ecs_cluster_name=$ECS_CLUSTER_NAME" >> $GITHUB_OUTPUT
          echo "ecr_repository_name=$ECR_REPOSITORY_NAME" >> $GITHUB_OUTPUT
          echo "ecr_repository_url=$ECR_REPOSITORY_URL" >> $GITHUB_OUTPUT
  check_valid_input:
    name: "Check Valid Input for Deploy ${{ github.event.inputs.environment }}"
    runs-on: ubuntu-latest
    needs: [find_constants]
    steps:
      - uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          aws-access-key-id: ${{ secrets.PUSH_ECR_REGISTRY_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PUSH_ECR_REGISTRY_AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Check if image tag is valid
        run: |
          RESULT=$(aws ecr list-images \
            --repository-name=${{ needs.find_constants.outputs.ecr_repository_name }} \
            --query="imageIds[?imageTag == '${{ github.event.inputs.image_tag }}']")
          if [[ "$RESULT" == *"[]"* ]]; then
            echo "invalid image tag"
            exit 1
          fi
  deploy:
    name: "Deploy ${{ github.event.inputs.environment }}"
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: [check_valid_input, find_constants]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          aws-access-key-id: ${{ secrets.DEPLOY_USER_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEPLOY_USER_AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Download task definition
        run: |
          TASK_DEFINITION_REVISION=""
          TASK_DEFINITION_REVISION_INPUT="${{ github.event.inputs.task_definition_revision }}"

          echo "TASK_DEFINITION_REVISION_INPUT: $TASK_DEFINITION_REVISION_INPUT"
          if [[ "$TASK_DEFINITION_REVISION_INPUT" != "latest" ]]; then
            TASK_DEFINITION_REVISION=":$TASK_DEFINITION_REVISION_INPUT"
          fi
          echo "Task Definition Revision: $TASK_DEFINITION_REVISION"
          TASK_DEFINITION="${{ needs.find_constants.outputs.task_definition_name }}$TASK_DEFINITION_REVISION"
          echo "Task Definition: $TASK_DEFINITION"
          aws ecs describe-task-definition --task-definition "$TASK_DEFINITION" --query taskDefinition > task-definition.json

      - name: Render Amazon ECS task definition
        id: render-container-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ needs.find_constants.outputs.task_definition_container_name }}
          image: ${{ needs.find_constants.outputs.ecr_repository_url }}:${{ github.event.inputs.image_tag }}

      - name: Deploy to Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-container-task-definition.outputs.task-definition }}
          service: ${{ needs.find_constants.outputs.ecs_service_name }}
          cluster: ${{ needs.find_constants.outputs.ecs_cluster_name }}
          wait-for-service-stability: true

  slacknotification:
    name: Slack Notification
    runs-on: ubuntu-latest
    needs: [deploy, find_constants]
    steps:
      - uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: ${{ job.status }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: "*${{ github.event.inputs.environment }}:* ${{ github.actor }} deployed ${{ needs.find_constants.outputs.application_name }} ${{ github.event.inputs.image_tag }}"
          MSG_MINIMAL: true
          SLACK_FOOTER: ""
          SLACK_MSG_AUTHOR: " "
          SLACK_TITLE: " "
