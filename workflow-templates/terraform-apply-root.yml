name: Terraform Apply

on:
  issue_comment:
    types: [created]

jobs:
  check_pr:
    runs-on: ubuntu-latest
    if: github.event.issue.pull_request
    steps:
      - run: echo "true"
  check_apply:
    runs-on: ubuntu-latest
    if: github.event.comment.body == '@apply root'
    steps:
      - run: echo "true"
  apply:
    runs-on: ubuntu-latest
    needs: [check_pr, check_apply]
    environment: terraform
    steps:
      - uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.QUICKPAY_TOOLS_READONLY_SSH_KEY_PRIVATE }}

      - name: Extract PR number
        id: pr
        run: |
          PR_URL="${{ github.event.issue.pull_request.url }}"
          PR_NUM=${PR_URL##*/}
          echo "number=$PR_NUM" >> $GITHUB_OUTPUT

      - name: Fail if Unapproved
        uses: actions/github-script@v6
        with:
          script: |
            const pr_num = parseInt("${{ steps.pr.outputs.number }}")
            const query = `
            query($owner:String!, $name:String!, $pr_num:Int!) {
              repository(name: $name, owner: $owner) {
                pullRequest(number: $pr_num) {
                  reviewDecision
                }
              }
            }
            `
            const result = await github.graphql(query, {
              pr_num,
              owner: context.repo.owner,
              name: context.repo.repo,
            })
            const review = result.repository.pullRequest.reviewDecision
            if (review !== "APPROVED") {
              core.setFailed('Pull request wasnt approved')
            }

      - name: Extract credentials
        id: credentials
        run: |
          echo "name=root" >> $GITHUB_OUTPUT
          echo "access_key_id=${{ secrets.ROOT_AWS_ACCESS_KEY_ID }}" >> $GITHUB_OUTPUT
          echo "secret_access_key=${{ secrets.ROOT_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_OUTPUT

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ steps.credentials.outputs.access_key_id }}
          aws-secret-access-key: ${{ steps.credentials.outputs.secret_access_key }}
          aws-region: eu-central-1

      - name: resolve pr refs
        id: refs
        uses: eficode/resolve-pr-refs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ steps.refs.outputs.head_ref }}

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.0

      - name: Find plan
        id: find_plan
        env:
          PLAN_BRANCH: __plan_branch_${{ steps.credentials.outputs.name }}
        run: |
          export PR_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          export COMMIT_SHA=$(git log -n 1 --pretty=format:"%H")  
          echo $PR_BRANCH
          echo "pr_branch=$PR_BRANCH" >> $GITHUB_OUTPUT
          echo $COMMIT_SHA
          git checkout $PLAN_BRANCH
          git pull origin $PLAN_BRANCH
          mv ./$COMMIT_SHA.tfplan /tmp/plan.tfplan
          git checkout $PR_BRANCH
          cd terraform
          if [[ -d main ]]
          then
            mv /tmp/plan.tfplan ./main/plan.tfplan
          else
            mv /tmp/plan.tfplan ./plan.tfplan
          fi

      - name: Apply plan
        run: |
          cd terraform
          if [[ -d main ]]
          then
            cd main
          fi
          terraform init -input=false
          terraform workspace select quickpay-${{ steps.credentials.outputs.name }}
          terraform apply -input=false plan.tfplan -no-color 2>&1 | tee -a /tmp/apply.txt

      - name: Upload Apply to Pastie
        id: pastie
        uses: QuickPay/pastie-upload-action@v1.1.0
        with:
          credentials: ${{ secrets.PASTIE_CREDENTIALS }}
          document_path: "/tmp/apply.txt"

      - name: "Comment PR"
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr_num = parseInt("${{ steps.pr.outputs.number }}")
            const { repo: { owner, repo }  } = context;
            const url = "${{ steps.pastie.outputs.url }}";
            const title = "# ${{ steps.credentials.outputs.name }} Apply";
            const body = `${title}\n${url}`;
            github.rest.issues.createComment({ issue_number: pr_num, owner, repo, body: body });

      - name: Slack Notification
        if: steps.is_run.outputs.is_run
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: ${{ job.status }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_TECH_QP_DEPLOYS }}
          SLACK_MESSAGE: "*root:* ${{ github.actor }} applied terraform for *${{ github.event.repository.name }}:${{ steps.find_plan.outputs.pr_branch }}*. See result at: ${{ steps.pastie.outputs.url }}"
          MSG_MINIMAL: true
          SLACK_FOOTER: ""
          SLACK_MSG_AUTHOR: " "
          SLACK_TITLE: " "
